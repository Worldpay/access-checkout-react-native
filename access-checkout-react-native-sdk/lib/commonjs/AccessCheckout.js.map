{"version":3,"sources":["AccessCheckout.tsx"],"names":["AccessCheckout","constructor","accessBaseUrl","merchantId","generateSessions","cardDetails","sessionTypes","Promise","resolve","reject","AccessCheckoutReactNative","baseUrl","panValue","pan","expiryValue","expiryDate","cvcValue","cvc","then","session","map","Map","set","card","catch","error","initialiseValidation","validationConfig","panId","expiryId","expiryDateId","cvcId","enablePanFormatting","acceptedCardBrands"],"mappings":";;;;;;;AAAA;;;;AAMe,MAAMA,cAAN,CAAqB;AAMlCC,EAAAA,WAAW,OAMR;AAAA,QANS;AACVC,MAAAA,aADU;AAEVC,MAAAA;AAFU,KAMT;;AAAA;;AAAA;;AACD,SAAKD,aAAL,GAAqBA,aAArB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAEDC,EAAAA,gBAAgB,CACdC,WADc,EAEdC,YAFc,EAGgB;AAC9B,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,uCAA0BN,gBAA1B,CAA2C;AACzCO,QAAAA,OAAO,EAAE,KAAKT,aAD2B;AAEzCC,QAAAA,UAAU,EAAE,KAAKA,UAFwB;AAGzCS,QAAAA,QAAQ,EAAEP,WAAW,CAACQ,GAHmB;AAIzCC,QAAAA,WAAW,EAAET,WAAW,CAACU,UAJgB;AAKzCC,QAAAA,QAAQ,EAAEX,WAAW,CAACY,GALmB;AAMzCX,QAAAA;AANyC,OAA3C,EAQE;AARF,OASGY,IATH,CASSC,OAAD,IAAa;AACjB,cAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;AACAD,QAAAA,GAAG,CAACE,GAAJ,CAAQ,MAAR,EAAgBH,OAAO,CAACI,IAAxB;AACAH,QAAAA,GAAG,CAACE,GAAJ,CAAQ,KAAR,EAAeH,OAAO,CAACF,GAAvB;AAEAT,QAAAA,OAAO,CAACY,GAAD,CAAP;AACD,OAfH,EAgBGI,KAhBH,CAgBUC,KAAD,IAAgB;AACrBhB,QAAAA,MAAM,CAACgB,KAAD,CAAN;AACD,OAlBH;AAmBD,KApBM,CAAP;AAqBD;;AAEDC,EAAAA,oBAAoB,CAClBC,gBADkB,EAEA;AAClB,WAAO,IAAIpB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,uCAA0BgB,oBAA1B,CAA+C;AAC7Cf,QAAAA,OAAO,EAAE,KAAKT,aAD+B;AAE7C0B,QAAAA,KAAK,EAAED,gBAAgB,CAACC,KAFqB;AAG7CC,QAAAA,QAAQ,EAAEF,gBAAgB,CAACG,YAHkB;AAI7CC,QAAAA,KAAK,EAAEJ,gBAAgB,CAACI,KAJqB;AAK7CC,QAAAA,mBAAmB,EAAEL,gBAAgB,CAACK,mBALO;AAM7CC,QAAAA,kBAAkB,EAAEN,gBAAgB,CAACM;AANQ,OAA/C,EAQGf,IARH,CAQQ,MAAM;AACVV,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAVH,EAWGgB,KAXH,CAWUC,KAAD,IAAgB;AACrBhB,QAAAA,MAAM,CAACgB,KAAD,CAAN;AACD,OAbH;AAcD,KAfM,CAAP;AAgBD;;AA/DiC;;;;gBAAfzB,c,yBACU,+B","sourcesContent":["import { AccessCheckoutReactNative } from './index';\n// @ts-ignore\nimport { CardDetails } from './session/CardDetails';\n// @ts-ignore\nimport CardValidationConfig from './validation/CardValidationConfig';\n\nexport default class AccessCheckout {\n  static ValidationEventType = 'AccessCheckoutValidationEvent';\n\n  accessBaseUrl: string;\n  merchantId?: string;\n\n  constructor({\n    accessBaseUrl,\n    merchantId,\n  }: {\n    accessBaseUrl: string;\n    merchantId?: string;\n  }) {\n    this.accessBaseUrl = accessBaseUrl;\n    this.merchantId = merchantId;\n  }\n\n  generateSessions(\n    cardDetails: CardDetails,\n    sessionTypes: string[]\n  ): Promise<Map<string, string>> {\n    return new Promise((resolve, reject) => {\n      AccessCheckoutReactNative.generateSessions({\n        baseUrl: this.accessBaseUrl,\n        merchantId: this.merchantId,\n        panValue: cardDetails.pan,\n        expiryValue: cardDetails.expiryDate,\n        cvcValue: cardDetails.cvc,\n        sessionTypes,\n      })\n        // @ts-ignore\n        .then((session) => {\n          const map = new Map<string, string>();\n          map.set('card', session.card);\n          map.set('cvc', session.cvc);\n\n          resolve(map);\n        })\n        .catch((error: any) => {\n          reject(error);\n        });\n    });\n  }\n\n  initialiseValidation(\n    validationConfig: CardValidationConfig\n  ): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      AccessCheckoutReactNative.initialiseValidation({\n        baseUrl: this.accessBaseUrl,\n        panId: validationConfig.panId,\n        expiryId: validationConfig.expiryDateId,\n        cvcId: validationConfig.cvcId,\n        enablePanFormatting: validationConfig.enablePanFormatting,\n        acceptedCardBrands: validationConfig.acceptedCardBrands,\n      })\n        .then(() => {\n          resolve(true);\n        })\n        .catch((error: any) => {\n          reject(error);\n        });\n    });\n  }\n}\n"]}