{"version":3,"sources":["AccessCheckout.tsx"],"names":["AccessCheckoutReactNative","AccessCheckout","constructor","baseUrl","merchantId","generateSessions","cardDetails","sessionTypes","Promise","resolve","reject","panValue","pan","expiryDateValue","expiryDate","cvcValue","cvc","then","bridgeSessions","sessions","card","catch","error","initialiseCardValidation","validationConfig","panId","expiryDateId","cvcId","enablePanFormatting","acceptedCardBrands"],"mappings":";;AAAA,SAASA,yBAAT,QAA0C,SAA1C,C,CACA;AACA;;AASA,eAAe,MAAMC,cAAN,CAAqB;AAMlCC,EAAAA,WAAW,OAMR;AAAA,QANS;AACVC,MAAAA,OADU;AAEVC,MAAAA;AAFU,KAMT;;AAAA;;AAAA;;AACD,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAEDC,EAAAA,gBAAgB,CACdC,WADc,EAEdC,YAFc,EAGK;AACnB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,MAAAA,yBAAyB,CAACK,gBAA1B,CAA2C;AACzCF,QAAAA,OAAO,EAAE,KAAKA,OAD2B;AAEzCC,QAAAA,UAAU,EAAE,KAAKA,UAFwB;AAGzCO,QAAAA,QAAQ,EAAEL,WAAW,CAACM,GAHmB;AAIzCC,QAAAA,eAAe,EAAEP,WAAW,CAACQ,UAJY;AAKzCC,QAAAA,QAAQ,EAAET,WAAW,CAACU,GALmB;AAMzCT,QAAAA;AANyC,OAA3C,EAQE;AARF,OASGU,IATH,CASSC,cAAD,IAAyB;AAC7B,cAAMC,QAAkB,GAAG,EAA3B;;AACA,YAAID,cAAc,CAACE,IAAnB,EAAyB;AACvBD,UAAAA,QAAQ,CAACC,IAAT,GAAgBF,cAAc,CAACE,IAA/B;AACD;;AACD,YAAIF,cAAc,CAACF,GAAnB,EAAwB;AACtBG,UAAAA,QAAQ,CAACH,GAAT,GAAeE,cAAc,CAACF,GAA9B;AACD;;AAEDP,QAAAA,OAAO,CAACU,QAAD,CAAP;AACD,OAnBH,EAoBE;AApBF,OAqBGE,KArBH,CAqBUC,KAAD,IAAgB;AACrBZ,QAAAA,MAAM,CAACY,KAAD,CAAN;AACD,OAvBH;AAwBD,KAzBM,CAAP;AA0BD;;AAEDC,EAAAA,wBAAwB,CACtBC,gBADsB,EAEJ;AAClB,WAAO,IAAIhB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,MAAAA,yBAAyB,CAACuB,wBAA1B,CAAmD;AACjDpB,QAAAA,OAAO,EAAE,KAAKA,OADmC;AAEjDsB,QAAAA,KAAK,EAAED,gBAAgB,CAACC,KAFyB;AAGjDC,QAAAA,YAAY,EAAEF,gBAAgB,CAACE,YAHkB;AAIjDC,QAAAA,KAAK,EAAEH,gBAAgB,CAACG,KAJyB;AAKjDC,QAAAA,mBAAmB,EAAEJ,gBAAgB,CAACI,mBALW;AAMjDC,QAAAA,kBAAkB,EAAEL,gBAAgB,CAACK;AANY,OAAnD,EAQGZ,IARH,CAQQ,MAAM;AACVR,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAVH,EAWE;AAXF,OAYGY,KAZH,CAYUC,KAAD,IAAgB;AACrBZ,QAAAA,MAAM,CAACY,KAAD,CAAN;AACD,OAdH;AAeD,KAhBM,CAAP;AAiBD;;AArEiC;;gBAAfrB,c,6BACc,mC","sourcesContent":["import { AccessCheckoutReactNative } from './index';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport CardDetails from './session/CardDetails';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport Sessions from './session/Sessions';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport CardValidationConfig from './validation/CardValidationConfig';\n\nexport default class AccessCheckout {\n  static CardValidationEventType = 'AccessCheckoutCardValidationEvent';\n\n  baseUrl: string;\n  merchantId?: string;\n\n  constructor({\n    baseUrl,\n    merchantId,\n  }: {\n    baseUrl: string;\n    merchantId?: string;\n  }) {\n    this.baseUrl = baseUrl;\n    this.merchantId = merchantId;\n  }\n\n  generateSessions(\n    cardDetails: CardDetails,\n    sessionTypes: string[]\n  ): Promise<Sessions> {\n    return new Promise((resolve, reject) => {\n      AccessCheckoutReactNative.generateSessions({\n        baseUrl: this.baseUrl,\n        merchantId: this.merchantId,\n        panValue: cardDetails.pan,\n        expiryDateValue: cardDetails.expiryDate,\n        cvcValue: cardDetails.cvc,\n        sessionTypes,\n      })\n        // eslint-disable-next-line  @typescript-eslint/no-explicit-any, prettier/prettier\n        .then((bridgeSessions: any) => {\n          const sessions: Sessions = {};\n          if (bridgeSessions.card) {\n            sessions.card = bridgeSessions.card;\n          }\n          if (bridgeSessions.cvc) {\n            sessions.cvc = bridgeSessions.cvc;\n          }\n\n          resolve(sessions);\n        })\n        // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n        .catch((error: any) => {\n          reject(error);\n        });\n    });\n  }\n\n  initialiseCardValidation(\n    validationConfig: CardValidationConfig\n  ): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      AccessCheckoutReactNative.initialiseCardValidation({\n        baseUrl: this.baseUrl,\n        panId: validationConfig.panId,\n        expiryDateId: validationConfig.expiryDateId,\n        cvcId: validationConfig.cvcId,\n        enablePanFormatting: validationConfig.enablePanFormatting,\n        acceptedCardBrands: validationConfig.acceptedCardBrands,\n      })\n        .then(() => {\n          resolve(true);\n        })\n        // eslint-disable-next-line  @typescript-eslint/no-explicit-any\n        .catch((error: any) => {\n          reject(error);\n        });\n    });\n  }\n}\n"]}