{"version":3,"names":["useEffect","NativeEventEmitter","AccessCheckoutReactNative","AccessCheckout","cvcOnlyValidationNativeEventListenerOf","ValidationListenerException","useCvcOnlyValidationEventListener","validationListener","nativeEventListener","nativeEventEmitter","eventSubscription","addListener","CvcOnlyValidationEventType","remove","useCvcOnlyValidation","accessCheckout","cvcOnlyValidationConfig","initialiseCvcOnlyValidation"],"sources":["useCvcOnlyValidation.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { NativeEventEmitter } from 'react-native';\nimport AccessCheckoutReactNative, {\n  AccessCheckout,\n  CardValidationEventListener,\n} from '../index';\nimport type { CvcOnlyValidationEventListener } from '../validation/CvcOnlyValidationEventListener';\nimport { cvcOnlyValidationNativeEventListenerOf } from '../validation/CvcOnlyValidationEventListener';\nimport { ValidationListenerException } from '../validation/ValidationListenerException';\n\nexport const useCvcOnlyValidationEventListener = (\n  validationListener: CvcOnlyValidationEventListener\n) => {\n  useEffect(() => {\n    //Safe-guard in the case where no validation listener was configured we avoid registering the native listener\n    if (!validationListener) {\n      return;\n    }\n\n    const nativeEventListener =\n      cvcOnlyValidationNativeEventListenerOf(validationListener);\n    const nativeEventEmitter = new NativeEventEmitter(\n      AccessCheckoutReactNative\n    );\n\n    const eventSubscription = nativeEventEmitter.addListener(\n      AccessCheckout.CvcOnlyValidationEventType,\n      nativeEventListener\n    );\n\n    return () => {\n      eventSubscription.remove();\n    };\n  }, []);\n};\n\ninterface UseCvcOnlyValidationHook {\n  accessCheckout: AccessCheckout;\n  cvcOnlyValidationConfig: {\n    cvcId: string;\n  };\n  validationListener: CardValidationEventListener;\n}\n\nexport const useCvcOnlyValidation = ({\n  accessCheckout,\n  cvcOnlyValidationConfig,\n  validationListener,\n}: UseCvcOnlyValidationHook) => {\n  /*\n  Implementation Note: To allow the hook to render and use hooks correctly:\n  `useCvcOnlyValidationEventListener` has a safe-guard inside it's useEffect to check if a validationListener\n  was provided in order to register the native event.\n  */\n  useCvcOnlyValidationEventListener(validationListener);\n  const initialiseCvcOnlyValidation = () => {\n    /*\n    Implementation Note: Since we do not block the rendering of the hook to allow for `validationConfig` to be optional.\n    We added a safe-guard that will raise a ValidationListenerException which prevents the\n    `initialiseCvcOnlyValidation` method from being called when no validationConfig is provided.\n    This provides the developers with a clear readable error message and enhances their debugging experience.\n    */\n    if (!validationListener) {\n      throw new ValidationListenerException();\n    }\n\n    return accessCheckout.initialiseCvcOnlyValidation(cvcOnlyValidationConfig);\n  };\n\n  return { initialiseCvcOnlyValidation };\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,kBAAkB,QAAQ,cAAc;AACjD,OAAOC,yBAAyB,IAC9BC,cAAc,QAET,UAAU;AAEjB,SAASC,sCAAsC,QAAQ,8CAA8C;AACrG,SAASC,2BAA2B,QAAQ,2CAA2C;AAEvF,OAAO,MAAMC,iCAAiC,GAC5CC,kBAAkD,IAC/C;EACHP,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACO,kBAAkB,EAAE;MACvB;IACF;IAEA,MAAMC,mBAAmB,GACvBJ,sCAAsC,CAACG,kBAAkB,CAAC;IAC5D,MAAME,kBAAkB,GAAG,IAAIR,kBAAkB,CAC/CC,yBACF,CAAC;IAED,MAAMQ,iBAAiB,GAAGD,kBAAkB,CAACE,WAAW,CACtDR,cAAc,CAACS,0BAA0B,EACzCJ,mBACF,CAAC;IAED,OAAO,MAAM;MACXE,iBAAiB,CAACG,MAAM,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;AACR,CAAC;AAUD,OAAO,MAAMC,oBAAoB,GAAGA,CAAC;EACnCC,cAAc;EACdC,uBAAuB;EACvBT;AACwB,CAAC,KAAK;EAC9B;AACF;AACA;AACA;AACA;EACED,iCAAiC,CAACC,kBAAkB,CAAC;EACrD,MAAMU,2BAA2B,GAAGA,CAAA,KAAM;IACxC;AACJ;AACA;AACA;AACA;AACA;IACI,IAAI,CAACV,kBAAkB,EAAE;MACvB,MAAM,IAAIF,2BAA2B,CAAC,CAAC;IACzC;IAEA,OAAOU,cAAc,CAACE,2BAA2B,CAACD,uBAAuB,CAAC;EAC5E,CAAC;EAED,OAAO;IAAEC;EAA4B,CAAC;AACxC,CAAC"}